#include <cftal/vec.h>
#include <ocl/ocl.h>
#include <iostream>
#include <iomanip>
#include <chrono>

int main()
{
    // [-0.292893230915069580078125, 0.4142135679721832275390625] : | p - f | <= 2^-31.90625
    // coefficients for log generated by sollya
    // x^1 : +0x8p-3f
    constexpr
    const float log_c1=+1.0000000000e+00f;
    // x^2 : -0x8p-4f
    constexpr
    const float log_c2=-5.0000000000e-01f;
    // x^3 : +0xa.aaaa3p-5f
    constexpr
    const float log_c3=+3.3333310485e-01f;
    // x^4 : -0x8.00002p-5f
    constexpr
    const float log_c4=-2.5000005960e-01f;
    // x^5 : +0xc.cd2a4p-6f
    constexpr
    const float log_c5=+2.0002228022e-01f;
    // x^6 : -0xa.aaebep-6f
    constexpr
    const float log_c6=-1.6668221354e-01f;
    // x^7 : +0x9.1974bp-6f
    constexpr
    const float log_c7=+1.4217869937e-01f;
    // x^8 : -0xf.dfab7p-7f
    constexpr
    const float log_c8=-1.2401335686e-01f;
    // x^9 : +0xf.39c7cp-7f
    constexpr
    const float log_c9=+1.1895081401e-01f;
    // x^10 : -0xe.fa013p-7f
    constexpr
    const float log_c10=-1.1700453609e-01f;
    // x^11 : +0x8.a773bp-7f
    constexpr
    const float log_c11=+6.7610226572e-02f;
    static_assert(log_c1==1.0f, "constraint violated");
    static_assert(log_c2==-0.5f, "constraint violated");
    constexpr
    static const float coeffs[]={
        log_c11, log_c10,
        log_c9, log_c8, log_c7, log_c6,
        log_c5, log_c4, log_c3, log_c2, log_c1
    };

    try {
        using namespace ocl;

        using ftype = float;

        constexpr const std::size_t elem_count=(64*1024*1024ULL);

        for (size_t i=0; i<32; ++i) {
            dvec<ftype> v_src(0.5f, elem_count);
            dvec<ftype> v_dst(0.0f, elem_count);
            auto start = std::chrono::steady_clock::now();
            v_dst=horner(v_src, coeffs)+
                horner(v_src, coeffs)+
                horner(v_src, coeffs)+
                horner(v_src, coeffs)+
                horner(v_src, coeffs)+
                horner(v_src, coeffs)+
                horner(v_src, coeffs)+
                horner(v_src, coeffs)+
                horner(v_src, coeffs)+
                horner(v_src, coeffs)+  // 10
                horner(v_src, coeffs)+
                horner(v_src, coeffs)+
                horner(v_src, coeffs)+
                horner(v_src, coeffs)+
                horner(v_src, coeffs)+
                horner(v_src, coeffs)+
                horner(v_src, coeffs)+
                horner(v_src, coeffs)+
                horner(v_src, coeffs)+
                horner(v_src, coeffs)+  // 20
                horner(v_src, coeffs)+
                horner(v_src, coeffs)+
                horner(v_src, coeffs)+
                horner(v_src, coeffs)+
                horner(v_src, coeffs)+
                horner(v_src, coeffs)+
                horner(v_src, coeffs)+
                horner(v_src, coeffs)+
                horner(v_src, coeffs)+
                horner(v_src, coeffs); // 30
            auto end = std::chrono::steady_clock::now();
            auto ns_elapsed=(end - start).count();
            // std::cout << ns_elapsed << std::endl;
            double gflops=(elem_count *(30*20+29))/double(ns_elapsed);
            std::cout << gflops << std::endl;
        }
        std::cout << "test passed\n";
    }
    catch (const ocl::be::error& e) {
        std::cout << "caught exception: ocl::be::error: " << e.what()
                  << '\n'
                  << e.error_string()
                  << std::endl;
    }
    catch (const std::runtime_error& e) {
        std::cout << "caught exception: runtime error: " << e.what()
                  << std::endl;
    }
    return 0;
}
